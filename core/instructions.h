#pragma once
#include "types.h"
#include <string>

enum ArgumentType
{
	NO_ARGUMENT = 0,
	IMMEDIATE_16,
	IMMEDIATE_8,
	SIGNED8,
	SIGNED8_JR
};

struct SInstruction
{
	//uint8 opCode;
	char debugFormatString[12 + 16];
	uint8 size;
	uint8 cycles_min;
	uint8 cycles_max;
	ArgumentType argtype;
};

static const SInstruction g_Instructions[0x100] =
{
{"NOP", 1, 4, 4, NO_ARGUMENT},
{"LD BC, %s", 3, 12, 12, IMMEDIATE_16},
{"LD (BC),A", 1, 8, 8, NO_ARGUMENT},
{"INC BC", 1, 8, 8, NO_ARGUMENT},
{"INC B", 1, 4, 4, NO_ARGUMENT},
{"DEC B", 1, 4, 4, NO_ARGUMENT},
{"LD B, %s", 2, 8, 8, IMMEDIATE_8},
{"RLCA", 1, 4, 4, NO_ARGUMENT},
{"LD (%s),SP", 3, 20, 20, IMMEDIATE_16},
{"ADD HL,BC", 1, 8, 8, NO_ARGUMENT},
{"LD A,(BC)", 1, 8, 8, NO_ARGUMENT},
{"DEC BC", 1, 8, 8, NO_ARGUMENT},
{"INC C", 1, 4, 4, NO_ARGUMENT},
{"DEC C", 1, 4, 4, NO_ARGUMENT},
{"LD C, %s", 2, 8, 8, IMMEDIATE_8},
{"RRCA", 1, 4, 4, NO_ARGUMENT},

{"STOP 0", 2, 4, 4, NO_ARGUMENT},
{"LD DE, %s", 3, 12, 12, IMMEDIATE_16},
{"LD (DE),A", 1, 8, 8, NO_ARGUMENT},
{"INC DE", 1, 8, 8, NO_ARGUMENT},
{"INC D", 1, 4, 4, NO_ARGUMENT},
{"DEC D", 1, 4, 4, NO_ARGUMENT},
{"LD D, %s", 2, 8, 8, IMMEDIATE_8},
{"RLA", 1, 4, 4, NO_ARGUMENT},
{"JR %s", 2, 12, 12, SIGNED8_JR},
{"ADD HL,DE", 1, 8, 8, NO_ARGUMENT},
{"LD A,(DE)", 1, 8, 8, NO_ARGUMENT},
{"DEC DE", 1, 8, 8, NO_ARGUMENT},
{"INC E", 1, 4, 4, NO_ARGUMENT},
{"DEC E", 1, 4, 4, NO_ARGUMENT},
{"LD E, %s", 2, 8, 8, IMMEDIATE_8},
{"RRA", 1, 4, 4, NO_ARGUMENT},

{"JR NZ, %s", 2, 12, 8, SIGNED8_JR},
{"LD HL, %s", 3, 12, 12, IMMEDIATE_16},
{"LD (HL+),A", 1, 8, 8, NO_ARGUMENT},
{"INC HL", 1, 8, 8, NO_ARGUMENT},
{"INC H", 1, 4, 4, NO_ARGUMENT},
{"DEC H", 1, 4, 4, NO_ARGUMENT},
{"LD H, %s", 2, 8, 8, IMMEDIATE_8},
{"DAA", 1, 4, 4, NO_ARGUMENT},
{"JR Z, %s", 2, 12, 8, SIGNED8_JR},
{"ADD HL,HL", 1, 8, 8, NO_ARGUMENT},
{"LD A,(HL+)", 1, 8, 8, NO_ARGUMENT},
{"DEC HL", 1, 8, 8, NO_ARGUMENT},
{"INC L", 1, 4, 4, NO_ARGUMENT},
{"DEC L", 1, 4, 4, NO_ARGUMENT},
{"LD L, %s", 2, 8, 8, IMMEDIATE_8},
{"CPL", 1, 4, 4, NO_ARGUMENT},

{"JR NC, %s", 2, 12, 8, SIGNED8_JR},
{"LD SP, %s", 3, 12, 12, IMMEDIATE_16},
{"LD (HL-),A", 1, 8, 8, NO_ARGUMENT},
{"INC SP", 1, 8, 8, NO_ARGUMENT},
{"INC (HL)", 1, 12, 12, NO_ARGUMENT},
{"DEC (HL)", 1, 12, 12, NO_ARGUMENT},
{"LD (HL), %s", 2, 12, 12, IMMEDIATE_8},
{"SCF", 1, 4, 4, NO_ARGUMENT},
{"JR C, %s", 2, 12, 8, SIGNED8_JR},
{"ADD HL,SP", 1, 8, 8, NO_ARGUMENT},
{"LD A,(HL-)", 1, 8, 8, NO_ARGUMENT},
{"DEC SP", 1, 8, 8, NO_ARGUMENT},
{"INC A", 1, 4, 4, NO_ARGUMENT},
{"DEC A", 1, 4, 4, NO_ARGUMENT},
{"LD A, %s", 2, 8, 8, IMMEDIATE_8},
{"CCF", 1, 4, 4, NO_ARGUMENT},

{"LD B,B", 1, 4, 4, NO_ARGUMENT},
{"LD B,C", 1, 4, 4, NO_ARGUMENT},
{"LD B,D", 1, 4, 4, NO_ARGUMENT},
{"LD B,E", 1, 4, 4, NO_ARGUMENT},
{"LD B,H", 1, 4, 4, NO_ARGUMENT},
{"LD B,L", 1, 4, 4, NO_ARGUMENT},
{"LD B,(HL)", 1, 8, 8, NO_ARGUMENT},
{"LD B,A", 1, 4, 4, NO_ARGUMENT},
{"LD C,B", 1, 4, 4, NO_ARGUMENT},
{"LD C,C", 1, 4, 4, NO_ARGUMENT},
{"LD C,D", 1, 4, 4, NO_ARGUMENT},
{"LD C,E", 1, 4, 4, NO_ARGUMENT},
{"LD C,H", 1, 4, 4, NO_ARGUMENT},
{"LD C,L", 1, 4, 4, NO_ARGUMENT},
{"LD C,(HL)", 1, 8, 8, NO_ARGUMENT},
{"LD C,A", 1, 4, 4, NO_ARGUMENT},

{"LD D,B", 1, 4, 4, NO_ARGUMENT},
{"LD D,C", 1, 4, 4, NO_ARGUMENT},
{"LD D,D", 1, 4, 4, NO_ARGUMENT},
{"LD D,E", 1, 4, 4, NO_ARGUMENT},
{"LD D,H", 1, 4, 4, NO_ARGUMENT},
{"LD D,L", 1, 4, 4, NO_ARGUMENT},
{"LD D,(HL)", 1, 8, 8, NO_ARGUMENT},
{"LD D,A", 1, 4, 4, NO_ARGUMENT},
{"LD E,B", 1, 4, 4, NO_ARGUMENT},
{"LD E,C", 1, 4, 4, NO_ARGUMENT},
{"LD E,D", 1, 4, 4, NO_ARGUMENT},
{"LD E,E", 1, 4, 4, NO_ARGUMENT},
{"LD E,H", 1, 4, 4, NO_ARGUMENT},
{"LD E,L", 1, 4, 4, NO_ARGUMENT},
{"LD E,(HL)", 1, 8, 8, NO_ARGUMENT},
{"LD E,A", 1, 4, 4, NO_ARGUMENT},

{"LD H,B", 1, 4, 4, NO_ARGUMENT},
{"LD H,C", 1, 4, 4, NO_ARGUMENT},
{"LD H,D", 1, 4, 4, NO_ARGUMENT},
{"LD H,E", 1, 4, 4, NO_ARGUMENT},
{"LD H,H", 1, 4, 4, NO_ARGUMENT},
{"LD H,L", 1, 4, 4, NO_ARGUMENT},
{"LD H,(HL)", 1, 8, 8, NO_ARGUMENT},
{"LD H,A", 1, 4, 4, NO_ARGUMENT},
{"LD L,B", 1, 4, 4, NO_ARGUMENT},
{"LD L,C", 1, 4, 4, NO_ARGUMENT},
{"LD L,D", 1, 4, 4, NO_ARGUMENT},
{"LD L,E", 1, 4, 4, NO_ARGUMENT},
{"LD L,H", 1, 4, 4, NO_ARGUMENT},
{"LD L,L", 1, 4, 4, NO_ARGUMENT},
{"LD L,(HL)", 1, 8, 8, NO_ARGUMENT},
{"LD L,A", 1, 4, 4, NO_ARGUMENT},

{"LD (HL),B", 1, 8, 8, NO_ARGUMENT},
{"LD (HL),C", 1, 8, 8, NO_ARGUMENT},
{"LD (HL),D", 1, 8, 8, NO_ARGUMENT},
{"LD (HL),E", 1, 8, 8, NO_ARGUMENT},
{"LD (HL),H", 1, 8, 8, NO_ARGUMENT},
{"LD (HL),L", 1, 8, 8, NO_ARGUMENT},
{"HALT", 1, 4, 4, NO_ARGUMENT},
{"LD (HL),A", 1, 8, 8, NO_ARGUMENT},
{"LD A,B", 1, 4, 4, NO_ARGUMENT},
{"LD A,C", 1, 4, 4, NO_ARGUMENT},
{"LD A,D", 1, 4, 4, NO_ARGUMENT},
{"LD A,E", 1, 4, 4, NO_ARGUMENT},
{"LD A,H", 1, 4, 4, NO_ARGUMENT},
{"LD A,L", 1, 4, 4, NO_ARGUMENT},
{"LD A,(HL)", 1, 8, 8, NO_ARGUMENT},
{"LD A,A", 1, 4, 4, NO_ARGUMENT},

{"ADD A,B", 1, 4, 4, NO_ARGUMENT},
{"ADD A,C", 1, 4, 4, NO_ARGUMENT},
{"ADD A,D", 1, 4, 4, NO_ARGUMENT},
{"ADD A,E", 1, 4, 4, NO_ARGUMENT},
{"ADD A,H", 1, 4, 4, NO_ARGUMENT},
{"ADD A,L", 1, 4, 4, NO_ARGUMENT},
{"ADD A,(HL)", 1, 8, 8, NO_ARGUMENT},
{"ADD A,A", 1, 4, 4, NO_ARGUMENT},
{"ADC A,B", 1, 4, 4, NO_ARGUMENT},
{"ADC A,C", 1, 4, 4, NO_ARGUMENT},
{"ADC A,D", 1, 4, 4, NO_ARGUMENT},
{"ADC A,E", 1, 4, 4, NO_ARGUMENT},
{"ADC A,H", 1, 4, 4, NO_ARGUMENT},
{"ADC A,L", 1, 4, 4, NO_ARGUMENT},
{"ADC A,(HL)", 1, 8, 8, NO_ARGUMENT},
{"ADC A,A", 1, 4, 4, NO_ARGUMENT},

{"SUB B", 1, 4, 4, NO_ARGUMENT},
{"SUB C", 1, 4, 4, NO_ARGUMENT},
{"SUB D", 1, 4, 4, NO_ARGUMENT},
{"SUB E", 1, 4, 4, NO_ARGUMENT},
{"SUB H", 1, 4, 4, NO_ARGUMENT},
{"SUB L", 1, 4, 4, NO_ARGUMENT},
{"SUB (HL)", 1, 8, 8, NO_ARGUMENT},
{"SUB A", 1, 4, 4, NO_ARGUMENT},
{"SBC A,B", 1, 4, 4, NO_ARGUMENT},
{"SBC A,C", 1, 4, 4, NO_ARGUMENT},
{"SBC A,D", 1, 4, 4, NO_ARGUMENT},
{"SBC A,E", 1, 4, 4, NO_ARGUMENT},
{"SBC A,H", 1, 4, 4, NO_ARGUMENT},
{"SBC A,L", 1, 4, 4, NO_ARGUMENT},
{"SBC A,(HL)", 1, 8, 8, NO_ARGUMENT},
{"SBC A,A", 1, 4, 4, NO_ARGUMENT},

{"AND B", 1, 4, 4, NO_ARGUMENT},
{"AND C", 1, 4, 4, NO_ARGUMENT},
{"AND D", 1, 4, 4, NO_ARGUMENT},
{"AND E", 1, 4, 4, NO_ARGUMENT},
{"AND H", 1, 4, 4, NO_ARGUMENT},
{"AND L", 1, 4, 4, NO_ARGUMENT},
{"AND (HL)", 1, 8, 8, NO_ARGUMENT},
{"AND A", 1, 4, 4, NO_ARGUMENT},
{"XOR B", 1, 4, 4, NO_ARGUMENT},
{"XOR C", 1, 4, 4, NO_ARGUMENT},
{"XOR D", 1, 4, 4, NO_ARGUMENT},
{"XOR E", 1, 4, 4, NO_ARGUMENT},
{"XOR H", 1, 4, 4, NO_ARGUMENT},
{"XOR L", 1, 4, 4, NO_ARGUMENT},
{"XOR (HL)", 1, 8, 8, NO_ARGUMENT},
{"XOR A", 1, 4, 4, NO_ARGUMENT},

{"OR B", 1, 4, 4, NO_ARGUMENT},
{"OR C", 1, 4, 4, NO_ARGUMENT},
{"OR D", 1, 4, 4, NO_ARGUMENT},
{"OR E", 1, 4, 4, NO_ARGUMENT},
{"OR H", 1, 4, 4, NO_ARGUMENT},
{"OR L", 1, 4, 4, NO_ARGUMENT},
{"OR (HL)", 1, 8, 8, NO_ARGUMENT},
{"OR A", 1, 4, 4, NO_ARGUMENT},
{"CP B", 1, 4, 4, NO_ARGUMENT},
{"CP C", 1, 4, 4, NO_ARGUMENT},
{"CP D", 1, 4, 4, NO_ARGUMENT},
{"CP E", 1, 4, 4, NO_ARGUMENT},
{"CP H", 1, 4, 4, NO_ARGUMENT},
{"CP L", 1, 4, 4, NO_ARGUMENT},
{"CP (HL)", 1, 8, 8, NO_ARGUMENT},
{"CP A", 1, 4, 4, NO_ARGUMENT},

{"RET NZ", 1, 20, 8, NO_ARGUMENT},
{"POP BC", 1, 12, 12, NO_ARGUMENT},
{"JP NZ, %s", 3, 16, 12, IMMEDIATE_16 },
{"JP %s", 3, 16, 16, IMMEDIATE_16 },
{"CALL NZ, %s", 3, 24, 12, IMMEDIATE_16 },
{"PUSH BC", 1, 16, 16, NO_ARGUMENT},
{"ADD A, %s", 2, 8, 8, IMMEDIATE_8 },
{"RST 00H", 1, 16, 16, NO_ARGUMENT},
{"RET Z", 1, 20, 8, NO_ARGUMENT},
{"RET", 1, 16, 16, NO_ARGUMENT},
{"JP Z, %s", 3, 16, 12, IMMEDIATE_16 },
{"PREFIX CB", 1, 4, 4, NO_ARGUMENT},
{"CALL Z, %s", 3, 24, 12, IMMEDIATE_16 },
{"CALL %s", 3, 24, 24, IMMEDIATE_16 },
{"ADC A, %s", 2, 8, 8, IMMEDIATE_8 },
{"RST 08H", 1, 16, 16, NO_ARGUMENT},

{"RET NC", 1, 20, 8, NO_ARGUMENT},
{"POP DE", 1, 12, 12, NO_ARGUMENT},
{"JP NC, %s", 3, 16, 12, IMMEDIATE_16 },
{ "<invalid>", 1, 0, 0 , NO_ARGUMENT},
{"CALL NC, %s", 3, 24, 12, IMMEDIATE_16 },
{"PUSH DE", 1, 16, 16, NO_ARGUMENT},
{"SUB %s", 2, 8, 8, IMMEDIATE_8 },
{"RST 10H", 1, 16, 16, NO_ARGUMENT},
{"RET C", 1, 20, 8, NO_ARGUMENT},
{"RETI", 1, 16, 16, NO_ARGUMENT},
{"JP C, %s", 3, 16, 12, IMMEDIATE_16 },
{ "<invalid>", 1, 0, 0 , NO_ARGUMENT},
{"CALL C, %s", 3, 24, 12, IMMEDIATE_16 },
{ "<invalid>", 1, 0, 0 , NO_ARGUMENT},
{"SBC A, %s", 2, 8, 8, IMMEDIATE_8 },
{"RST 18H", 1, 16, 16, NO_ARGUMENT},

{"LDH (%s),A", 2, 12, 12, IMMEDIATE_8 },
{"POP HL", 1, 12, 12, NO_ARGUMENT},
{"LD (C),A", 1, 8, 8, NO_ARGUMENT},
{ "<invalid>", 1, 0, 0 , NO_ARGUMENT},
{ "<invalid>", 1, 0, 0 , NO_ARGUMENT},
{"PUSH HL", 1, 16, 16, NO_ARGUMENT},
{"AND %s", 2, 8, 8, IMMEDIATE_8 },
{"RST 20H", 1, 16, 16, NO_ARGUMENT},
{"ADD SP, %s", 2, 16, 16, SIGNED8},
{"JP (HL)", 1, 4, 4, NO_ARGUMENT},
{"LD (%s),A", 3, 16, 16, IMMEDIATE_16 },
{ "<invalid>", 1, 0, 0 , NO_ARGUMENT},
{ "<invalid>", 1, 0, 0 , NO_ARGUMENT},
{ "<invalid>", 1, 0, 0 , NO_ARGUMENT},
{"XOR %s", 2, 8, 8, IMMEDIATE_8 },
{"RST 28H", 1, 16, 16, NO_ARGUMENT},

{"LDH A,(%s)", 2, 12, 12, IMMEDIATE_8 },
{"POP AF", 1, 12, 12, NO_ARGUMENT},
{"LD A,(C)", 1, 8, 8, NO_ARGUMENT},
{"DI", 1, 4, 4, NO_ARGUMENT},
{ "<invalid>", 1, 0, 0 , NO_ARGUMENT},
{"PUSH AF", 1, 16, 16, NO_ARGUMENT},
{"OR %s", 2, 8, 8, IMMEDIATE_8 },
{"RST 30H", 1, 16, 16, NO_ARGUMENT},
{"LD HL,SP + %s", 2, 12, 12, SIGNED8},
{"LD SP,HL", 1, 8, 8, NO_ARGUMENT},
{"LD A,(%s)", 3, 16, 16, IMMEDIATE_16 },
{"EI", 1, 4, 4, NO_ARGUMENT},
{ "<invalid>", 1, 0, 0 , NO_ARGUMENT},
{ "<invalid>", 1, 0, 0 , NO_ARGUMENT},
{"CP %s", 2, 8, 8, IMMEDIATE_8 },
{"RST 38H", 1, 16, 16, NO_ARGUMENT},
};

static_assert(sizeof(g_Instructions) / sizeof(SInstruction) == 0x100, "Wrong instruction number!");

static const SInstruction g_InstructionsSecondary[0x100] =
{
{"RLC B", 2, 8, 8, NO_ARGUMENT},
{"RLC C", 2, 8, 8, NO_ARGUMENT},
{"RLC D", 2, 8, 8, NO_ARGUMENT},
{"RLC E", 2, 8, 8, NO_ARGUMENT},
{"RLC H", 2, 8, 8, NO_ARGUMENT},
{"RLC L", 2, 8, 8, NO_ARGUMENT},
{"RLC (HL)", 2, 16, 16, NO_ARGUMENT},
{"RLC A", 2, 8, 8, NO_ARGUMENT},
{"RRC B", 2, 8, 8, NO_ARGUMENT},
{"RRC C", 2, 8, 8, NO_ARGUMENT},
{"RRC D", 2, 8, 8, NO_ARGUMENT},
{"RRC E", 2, 8, 8, NO_ARGUMENT},
{"RRC H", 2, 8, 8, NO_ARGUMENT},
{"RRC L", 2, 8, 8, NO_ARGUMENT},
{"RRC (HL)", 2, 16, 16, NO_ARGUMENT},
{"RRC A", 2, 8, 8, NO_ARGUMENT},
{"RL B", 2, 8, 8, NO_ARGUMENT},
{"RL C", 2, 8, 8, NO_ARGUMENT},
{"RL D", 2, 8, 8, NO_ARGUMENT},
{"RL E", 2, 8, 8, NO_ARGUMENT},
{"RL H", 2, 8, 8, NO_ARGUMENT},
{"RL L", 2, 8, 8, NO_ARGUMENT},
{"RL (HL)", 2, 16, 16, NO_ARGUMENT},
{"RL A", 2, 8, 8, NO_ARGUMENT},
{"RR B", 2, 8, 8, NO_ARGUMENT},
{"RR C", 2, 8, 8, NO_ARGUMENT},
{"RR D", 2, 8, 8, NO_ARGUMENT},
{"RR E", 2, 8, 8, NO_ARGUMENT},
{"RR H", 2, 8, 8, NO_ARGUMENT},
{"RR L", 2, 8, 8, NO_ARGUMENT},
{"RR (HL)", 2, 16, 16, NO_ARGUMENT},
{"RR A", 2, 8, 8, NO_ARGUMENT},
{"SLA B", 2, 8, 8, NO_ARGUMENT},
{"SLA C", 2, 8, 8, NO_ARGUMENT},
{"SLA D", 2, 8, 8, NO_ARGUMENT},
{"SLA E", 2, 8, 8, NO_ARGUMENT},
{"SLA H", 2, 8, 8, NO_ARGUMENT},
{"SLA L", 2, 8, 8, NO_ARGUMENT},
{"SLA (HL)", 2, 16, 16, NO_ARGUMENT},
{"SLA A", 2, 8, 8, NO_ARGUMENT},
{"SRA B", 2, 8, 8, NO_ARGUMENT},
{"SRA C", 2, 8, 8, NO_ARGUMENT},
{"SRA D", 2, 8, 8, NO_ARGUMENT},
{"SRA E", 2, 8, 8, NO_ARGUMENT},
{"SRA H", 2, 8, 8, NO_ARGUMENT},
{"SRA L", 2, 8, 8, NO_ARGUMENT},
{"SRA (HL)", 2, 16, 16, NO_ARGUMENT},
{"SRA A", 2, 8, 8, NO_ARGUMENT},
{"SWAP B", 2, 8, 8, NO_ARGUMENT},
{"SWAP C", 2, 8, 8, NO_ARGUMENT},
{"SWAP D", 2, 8, 8, NO_ARGUMENT},
{"SWAP E", 2, 8, 8, NO_ARGUMENT},
{"SWAP H", 2, 8, 8, NO_ARGUMENT},
{"SWAP L", 2, 8, 8, NO_ARGUMENT},
{"SWAP (HL)", 2, 16, 16, NO_ARGUMENT},
{"SWAP A", 2, 8, 8, NO_ARGUMENT},
{"SRL B", 2, 8, 8, NO_ARGUMENT},
{"SRL C", 2, 8, 8, NO_ARGUMENT},
{"SRL D", 2, 8, 8, NO_ARGUMENT},
{"SRL E", 2, 8, 8, NO_ARGUMENT},
{"SRL H", 2, 8, 8, NO_ARGUMENT},
{"SRL L", 2, 8, 8, NO_ARGUMENT},
{"SRL (HL)", 2, 16, 16, NO_ARGUMENT},
{"SRL A", 2, 8, 8, NO_ARGUMENT},
{"BIT 0,B", 2, 8, 8, NO_ARGUMENT},
{"BIT 0,C", 2, 8, 8, NO_ARGUMENT},
{"BIT 0,D", 2, 8, 8, NO_ARGUMENT},
{"BIT 0,E", 2, 8, 8, NO_ARGUMENT},
{"BIT 0,H", 2, 8, 8, NO_ARGUMENT},
{"BIT 0,L", 2, 8, 8, NO_ARGUMENT},
{"BIT 0,(HL)", 2, 16, 16, NO_ARGUMENT},
{"BIT 0,A", 2, 8, 8, NO_ARGUMENT},
{"BIT 1,B", 2, 8, 8, NO_ARGUMENT},
{"BIT 1,C", 2, 8, 8, NO_ARGUMENT},
{"BIT 1,D", 2, 8, 8, NO_ARGUMENT},
{"BIT 1,E", 2, 8, 8, NO_ARGUMENT},
{"BIT 1,H", 2, 8, 8, NO_ARGUMENT},
{"BIT 1,L", 2, 8, 8, NO_ARGUMENT},
{"BIT 1,(HL)", 2, 16, 16, NO_ARGUMENT},
{"BIT 1,A", 2, 8, 8, NO_ARGUMENT},
{"BIT 2,B", 2, 8, 8, NO_ARGUMENT},
{"BIT 2,C", 2, 8, 8, NO_ARGUMENT},
{"BIT 2,D", 2, 8, 8, NO_ARGUMENT},
{"BIT 2,E", 2, 8, 8, NO_ARGUMENT},
{"BIT 2,H", 2, 8, 8, NO_ARGUMENT},
{"BIT 2,L", 2, 8, 8, NO_ARGUMENT},
{"BIT 2,(HL)", 2, 16, 16, NO_ARGUMENT},
{"BIT 2,A", 2, 8, 8, NO_ARGUMENT},
{"BIT 3,B", 2, 8, 8, NO_ARGUMENT},
{"BIT 3,C", 2, 8, 8, NO_ARGUMENT},
{"BIT 3,D", 2, 8, 8, NO_ARGUMENT},
{"BIT 3,E", 2, 8, 8, NO_ARGUMENT},
{"BIT 3,H", 2, 8, 8, NO_ARGUMENT},
{"BIT 3,L", 2, 8, 8, NO_ARGUMENT},
{"BIT 3,(HL)", 2, 16, 16, NO_ARGUMENT},
{"BIT 3,A", 2, 8, 8, NO_ARGUMENT},
{"BIT 4,B", 2, 8, 8, NO_ARGUMENT},
{"BIT 4,C", 2, 8, 8, NO_ARGUMENT},
{"BIT 4,D", 2, 8, 8, NO_ARGUMENT},
{"BIT 4,E", 2, 8, 8, NO_ARGUMENT},
{"BIT 4,H", 2, 8, 8, NO_ARGUMENT},
{"BIT 4,L", 2, 8, 8, NO_ARGUMENT},
{"BIT 4,(HL)", 2, 16, 16, NO_ARGUMENT},
{"BIT 4,A", 2, 8, 8, NO_ARGUMENT},
{"BIT 5,B", 2, 8, 8, NO_ARGUMENT},
{"BIT 5,C", 2, 8, 8, NO_ARGUMENT},
{"BIT 5,D", 2, 8, 8, NO_ARGUMENT},
{"BIT 5,E", 2, 8, 8, NO_ARGUMENT},
{"BIT 5,H", 2, 8, 8, NO_ARGUMENT},
{"BIT 5,L", 2, 8, 8, NO_ARGUMENT},
{"BIT 5,(HL)", 2, 16, 16, NO_ARGUMENT},
{"BIT 5,A", 2, 8, 8, NO_ARGUMENT},
{"BIT 6,B", 2, 8, 8, NO_ARGUMENT},
{"BIT 6,C", 2, 8, 8, NO_ARGUMENT},
{"BIT 6,D", 2, 8, 8, NO_ARGUMENT},
{"BIT 6,E", 2, 8, 8, NO_ARGUMENT},
{"BIT 6,H", 2, 8, 8, NO_ARGUMENT},
{"BIT 6,L", 2, 8, 8, NO_ARGUMENT},
{"BIT 6,(HL)", 2, 16, 16, NO_ARGUMENT},
{"BIT 6,A", 2, 8, 8, NO_ARGUMENT},
{"BIT 7,B", 2, 8, 8, NO_ARGUMENT},
{"BIT 7,C", 2, 8, 8, NO_ARGUMENT},
{"BIT 7,D", 2, 8, 8, NO_ARGUMENT},
{"BIT 7,E", 2, 8, 8, NO_ARGUMENT},
{"BIT 7,H", 2, 8, 8, NO_ARGUMENT},
{"BIT 7,L", 2, 8, 8, NO_ARGUMENT},
{"BIT 7,(HL)", 2, 16, 16, NO_ARGUMENT},
{"BIT 7,A", 2, 8, 8, NO_ARGUMENT},
{"RES 0,B", 2, 8, 8, NO_ARGUMENT},
{"RES 0,C", 2, 8, 8, NO_ARGUMENT},
{"RES 0,D", 2, 8, 8, NO_ARGUMENT},
{"RES 0,E", 2, 8, 8, NO_ARGUMENT},
{"RES 0,H", 2, 8, 8, NO_ARGUMENT},
{"RES 0,L", 2, 8, 8, NO_ARGUMENT},
{"RES 0,(HL)", 2, 16, 16, NO_ARGUMENT},
{"RES 0,A", 2, 8, 8, NO_ARGUMENT},
{"RES 1,B", 2, 8, 8, NO_ARGUMENT},
{"RES 1,C", 2, 8, 8, NO_ARGUMENT},
{"RES 1,D", 2, 8, 8, NO_ARGUMENT},
{"RES 1,E", 2, 8, 8, NO_ARGUMENT},
{"RES 1,H", 2, 8, 8, NO_ARGUMENT},
{"RES 1,L", 2, 8, 8, NO_ARGUMENT},
{"RES 1,(HL)", 2, 16, 16, NO_ARGUMENT},
{"RES 1,A", 2, 8, 8, NO_ARGUMENT},
{"RES 2,B", 2, 8, 8, NO_ARGUMENT},
{"RES 2,C", 2, 8, 8, NO_ARGUMENT},
{"RES 2,D", 2, 8, 8, NO_ARGUMENT},
{"RES 2,E", 2, 8, 8, NO_ARGUMENT},
{"RES 2,H", 2, 8, 8, NO_ARGUMENT},
{"RES 2,L", 2, 8, 8, NO_ARGUMENT},
{"RES 2,(HL)", 2, 16, 16, NO_ARGUMENT},
{"RES 2,A", 2, 8, 8, NO_ARGUMENT},
{"RES 3,B", 2, 8, 8, NO_ARGUMENT},
{"RES 3,C", 2, 8, 8, NO_ARGUMENT},
{"RES 3,D", 2, 8, 8, NO_ARGUMENT},
{"RES 3,E", 2, 8, 8, NO_ARGUMENT},
{"RES 3,H", 2, 8, 8, NO_ARGUMENT},
{"RES 3,L", 2, 8, 8, NO_ARGUMENT},
{"RES 3,(HL)", 2, 16, 16, NO_ARGUMENT},
{"RES 3,A", 2, 8, 8, NO_ARGUMENT},
{"RES 4,B", 2, 8, 8, NO_ARGUMENT},
{"RES 4,C", 2, 8, 8, NO_ARGUMENT},
{"RES 4,D", 2, 8, 8, NO_ARGUMENT},
{"RES 4,E", 2, 8, 8, NO_ARGUMENT},
{"RES 4,H", 2, 8, 8, NO_ARGUMENT},
{"RES 4,L", 2, 8, 8, NO_ARGUMENT},
{"RES 4,(HL)", 2, 16, 16, NO_ARGUMENT},
{"RES 4,A", 2, 8, 8, NO_ARGUMENT},
{"RES 5,B", 2, 8, 8, NO_ARGUMENT},
{"RES 5,C", 2, 8, 8, NO_ARGUMENT},
{"RES 5,D", 2, 8, 8, NO_ARGUMENT},
{"RES 5,E", 2, 8, 8, NO_ARGUMENT},
{"RES 5,H", 2, 8, 8, NO_ARGUMENT},
{"RES 5,L", 2, 8, 8, NO_ARGUMENT},
{"RES 5,(HL)", 2, 16, 16, NO_ARGUMENT},
{"RES 5,A", 2, 8, 8, NO_ARGUMENT},
{"RES 6,B", 2, 8, 8, NO_ARGUMENT},
{"RES 6,C", 2, 8, 8, NO_ARGUMENT},
{"RES 6,D", 2, 8, 8, NO_ARGUMENT},
{"RES 6,E", 2, 8, 8, NO_ARGUMENT},
{"RES 6,H", 2, 8, 8, NO_ARGUMENT},
{"RES 6,L", 2, 8, 8, NO_ARGUMENT},
{"RES 6,(HL)", 2, 16, 16, NO_ARGUMENT},
{"RES 6,A", 2, 8, 8, NO_ARGUMENT},
{"RES 7,B", 2, 8, 8, NO_ARGUMENT},
{"RES 7,C", 2, 8, 8, NO_ARGUMENT},
{"RES 7,D", 2, 8, 8, NO_ARGUMENT},
{"RES 7,E", 2, 8, 8, NO_ARGUMENT},
{"RES 7,H", 2, 8, 8, NO_ARGUMENT},
{"RES 7,L", 2, 8, 8, NO_ARGUMENT},
{"RES 7,(HL)", 2, 16, 16, NO_ARGUMENT},
{"RES 7,A", 2, 8, 8, NO_ARGUMENT},
{"SET 0,B", 2, 8, 8, NO_ARGUMENT},
{"SET 0,C", 2, 8, 8, NO_ARGUMENT},
{"SET 0,D", 2, 8, 8, NO_ARGUMENT},
{"SET 0,E", 2, 8, 8, NO_ARGUMENT},
{"SET 0,H", 2, 8, 8, NO_ARGUMENT},
{"SET 0,L", 2, 8, 8, NO_ARGUMENT},
{"SET 0,(HL)", 2, 16, 16, NO_ARGUMENT},
{"SET 0,A", 2, 8, 8, NO_ARGUMENT},
{"SET 1,B", 2, 8, 8, NO_ARGUMENT},
{"SET 1,C", 2, 8, 8, NO_ARGUMENT},
{"SET 1,D", 2, 8, 8, NO_ARGUMENT},
{"SET 1,E", 2, 8, 8, NO_ARGUMENT},
{"SET 1,H", 2, 8, 8, NO_ARGUMENT},
{"SET 1,L", 2, 8, 8, NO_ARGUMENT},
{"SET 1,(HL)", 2, 16, 16, NO_ARGUMENT},
{"SET 1,A", 2, 8, 8, NO_ARGUMENT},
{"SET 2,B", 2, 8, 8, NO_ARGUMENT},
{"SET 2,C", 2, 8, 8, NO_ARGUMENT},
{"SET 2,D", 2, 8, 8, NO_ARGUMENT},
{"SET 2,E", 2, 8, 8, NO_ARGUMENT},
{"SET 2,H", 2, 8, 8, NO_ARGUMENT},
{"SET 2,L", 2, 8, 8, NO_ARGUMENT},
{"SET 2,(HL)", 2, 16, 16, NO_ARGUMENT},
{"SET 2,A", 2, 8, 8, NO_ARGUMENT},
{"SET 3,B", 2, 8, 8, NO_ARGUMENT},
{"SET 3,C", 2, 8, 8, NO_ARGUMENT},
{"SET 3,D", 2, 8, 8, NO_ARGUMENT},
{"SET 3,E", 2, 8, 8, NO_ARGUMENT},
{"SET 3,H", 2, 8, 8, NO_ARGUMENT},
{"SET 3,L", 2, 8, 8, NO_ARGUMENT},
{"SET 3,(HL)", 2, 16, 16, NO_ARGUMENT},
{"SET 3,A", 2, 8, 8, NO_ARGUMENT},
{"SET 4,B", 2, 8, 8, NO_ARGUMENT},
{"SET 4,C", 2, 8, 8, NO_ARGUMENT},
{"SET 4,D", 2, 8, 8, NO_ARGUMENT},
{"SET 4,E", 2, 8, 8, NO_ARGUMENT},
{"SET 4,H", 2, 8, 8, NO_ARGUMENT},
{"SET 4,L", 2, 8, 8, NO_ARGUMENT},
{"SET 4,(HL)", 2, 16, 16, NO_ARGUMENT},
{"SET 4,A", 2, 8, 8, NO_ARGUMENT},
{"SET 5,B", 2, 8, 8, NO_ARGUMENT},
{"SET 5,C", 2, 8, 8, NO_ARGUMENT},
{"SET 5,D", 2, 8, 8, NO_ARGUMENT},
{"SET 5,E", 2, 8, 8, NO_ARGUMENT},
{"SET 5,H", 2, 8, 8, NO_ARGUMENT},
{"SET 5,L", 2, 8, 8, NO_ARGUMENT},
{"SET 5,(HL)", 2, 16, 16, NO_ARGUMENT},
{"SET 5,A", 2, 8, 8, NO_ARGUMENT},
{"SET 6,B", 2, 8, 8, NO_ARGUMENT},
{"SET 6,C", 2, 8, 8, NO_ARGUMENT},
{"SET 6,D", 2, 8, 8, NO_ARGUMENT},
{"SET 6,E", 2, 8, 8, NO_ARGUMENT},
{"SET 6,H", 2, 8, 8, NO_ARGUMENT},
{"SET 6,L", 2, 8, 8, NO_ARGUMENT},
{"SET 6,(HL)", 2, 16, 16, NO_ARGUMENT},
{"SET 6,A", 2, 8, 8, NO_ARGUMENT},
{"SET 7,B", 2, 8, 8, NO_ARGUMENT},
{"SET 7,C", 2, 8, 8, NO_ARGUMENT},
{"SET 7,D", 2, 8, 8, NO_ARGUMENT},
{"SET 7,E", 2, 8, 8, NO_ARGUMENT},
{"SET 7,H", 2, 8, 8, NO_ARGUMENT},
{"SET 7,L", 2, 8, 8, NO_ARGUMENT},
{"SET 7,(HL)", 2, 16, 16, NO_ARGUMENT},
{"SET 7,A", 2, 8, 8, NO_ARGUMENT},
};

static_assert(sizeof(g_InstructionsSecondary) / sizeof(SInstruction) == 0x100, "Wrong instruction number!");

class IMemoryController;
void ParseInstructionIndex(IMemoryController* pMemory, uint16 pc, uint8& opcode, bool& isSecondary);
const SInstruction& GetInstruction(uint8 opcode, bool isSecondary);

const SInstruction& ParseInstruction(IMemoryController* pMemory, uint16 pc);
std::string PrintInstructionTest(IMemoryController* pMemory, uint16 pc);